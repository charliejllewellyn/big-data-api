AWSTemplateFormatVersion: 2010-09-09
Parameters:
  InstanceType:
    Type: String
    Default: m5.xlarge
  ReleaseLabel:
    Type: String
    Default: emr-5.27.0
  ProjectName:
    Type: String
    Default: big-data-api
  vpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16

Mappings: 
  RegionMap: 
    eu-west-1: 
      "HVM64": "ami-040ba9174949f6de4"
    eu-west-2:
      "HVM64": "ami-00e8b55a2e841be44"

Resources:

  vpc:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: !Ref vpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: Name
          Value: !Ref ProjectName

  Ec2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "EC2 SSH Access"
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  privateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref vpc
      CidrBlock: !Select [0, !Cidr [!Ref vpcCidrBlock, 6, 8]]
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", a ] ]
      Tags:
        -
          Key: Name
          Value: !Join [ "", [ !Ref ProjectName, "-", "private-", a ] ]

  privateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref vpc
      CidrBlock: !Select [1, !Cidr [!Ref vpcCidrBlock, 6, 8]]
      AvailabilityZone: !Join [ "", [ !Ref "AWS::Region", b ] ]
      Tags:
        -
          Key: Name
          Value: !Join [ "", [ !Ref ProjectName, "-", "private-", b ] ]


  privateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref vpc
      Tags:
        -
          Key: Name
          Value: !Join [ "", [ !Ref ProjectName, "-", "private" ] ]

  PrivateSubnetAssA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnetA

  PrivateSubnetAssB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnetB

  VPCIdInterfaceEndpointsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Interface Endpoints"
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref vpcCidrBlock

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      RouteTableIds: 
        - !Ref privateRouteTable
      ServiceName: !Join [ '', [ 'com.amazonaws.', !Ref 'AWS::Region', '.s3' ] ]
      VpcId: !Ref vpc

  ec2Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref vpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref privateSubnetA
        - !Ref privateSubnetB
      SecurityGroupIds:
        - !Ref VPCIdInterfaceEndpointsSecurityGroup

  ec2MessenegesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref vpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref privateSubnetA
        - !Ref privateSubnetB
      SecurityGroupIds:
        - !Ref VPCIdInterfaceEndpointsSecurityGroup

  ssmEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref vpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref privateSubnetA
        - !Ref privateSubnetB
      SecurityGroupIds:
        - !Ref VPCIdInterfaceEndpointsSecurityGroup

  ssmMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref vpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: 
        - !Ref privateSubnetA
        - !Ref privateSubnetB
      SecurityGroupIds:
        - !Ref VPCIdInterfaceEndpointsSecurityGroup

  glueEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref vpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.glue'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref privateSubnetA
        - !Ref privateSubnetB
      SecurityGroupIds:
        - !Ref VPCIdInterfaceEndpointsSecurityGroup

  cluster:
    Type: 'AWS::EMR::Cluster'
    Properties:
      Applications:
        - Name: Presto
        - Name: Hive
        - Name: Hadoop
      Configurations:
      - Classification: hive-site
        ConfigurationProperties:
          hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
      - Classification: presto-connector-hive
        ConfigurationProperties:
          hive.metastore.glue.datacatalog.enabled: 'true'
      - Classification: spark-hive-site
        ConfigurationProperties:
          hive.metastore.client.factory.class: com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
      Instances:
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType: !Ref InstanceType
          Market: ON_DEMAND
          Name: cfnMaster
        CoreInstanceGroup:
          InstanceCount: 1
          InstanceType: !Ref InstanceType
          Market: ON_DEMAND
          Name: cfnCore
        Ec2SubnetId: !Ref privateSubnetA
        AdditionalSlaveSecurityGroups:
          - !Ref emrSecurityGroup
        AdditionalMasterSecurityGroups:
          - !Ref emrSecurityGroup
      Name: CFNtest
      JobFlowRole: !Ref emrEc2InstanceProfile
      ServiceRole: !Ref emrRole
      ReleaseLabel: !Ref ReleaseLabel
      VisibleToAllUsers: true
      Tags:
        - Key: Name
          Value: !Ref ProjectName

  emrRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole'

  emrEc2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'

  emrEc2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref emrEc2Role

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns: # TODO get rid of managed policy
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'

  emrSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appserver Instances
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Join ['-', [ !Ref ProjectName, 'EMR' ] ]

  EmrSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref emrSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  lambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appserver Instances
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Join ['-', [ !Ref ProjectName, 'Lambda' ] ]

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref lambdaSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref lambdaSecurityGroup

  LambdaFunction: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: cjl-eu-west-2
        S3Key: LambdaFunctions/lambda.zip
      Handler: 'index.lambda_handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: 'python3.7'
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref lambdaSecurityGroup
        SubnetIds:
          - !Ref privateSubnetA

  GltdApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Gltd API
      Description: API used for Gltd requests
      FailOnWarnings: true
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - LambdaFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: GltdApi
          - "/*"
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchLogsRole
        - Arn
  GltdApiStage:
    DependsOn:
    - ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      RestApiId:
        Ref: GltdApi
      StageName: LATEST
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - GltdRequest
    Properties:
      RestApiId:
        Ref: GltdApi
      StageName: DummyStage
  GltdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: GltdApi
      ParentId:
        Fn::GetAtt:
        - GltdApi
        - RootResourceId
      PathPart: storesales
  GltdRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - ":lambda:path/2015-03-31/functions/"
            - Fn::GetAtt:
              - LambdaFunction
              - Arn
            - "/invocations"
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          application/json:
            Fn::Join:
            - ''
            - - "{"
              - '  "name": "$input.params(''name'')"'
              - "}"
      RequestParameters:
        method.request.querystring.name: false
      ResourceId:
        Ref: GltdResource
      RestApiId:
        Ref: GltdApi
      MethodResponses:
      - StatusCode: 200

  glueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - glue:*
                - s3:GetBucketLocation
                - s3:ListBucket
                - s3:ListAllMyBuckets
                - s3:GetBucketAcl
                - ec2:DescribeVpcEndpoints
                - ec2:DescribeRouteTables
                - ec2:CreateNetworkInterface
                - ec2:DeleteNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
                - ec2:DescribeVpcAttribute
                - iam:ListRolePolicies
                - iam:GetRole
                - iam:GetRolePolicy
                - cloudwatch:PutMetricData
                Resource:
                - "*"
              - Effect: Allow
                Action:
                - s3:CreateBucket
                Resource:
                - arn:aws:s3:::aws-glue-*
              - Effect: Allow
                Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
                Resource:
                - arn:aws:s3:::aws-glue-*/*
                - arn:aws:s3:::*/*aws-glue-*/*
              - Effect: Allow
                Action:
                - s3:GetObject
                Resource:
                - arn:aws:s3:::crawler-public*
                - arn:aws:s3:::aws-glue-*
              - Effect: Allow
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:AssociateKmsKey
                Resource:
                - arn:aws:logs:*:*:/aws-glue/*
              - Effect: Allow
                Action:
                - ec2:CreateTags
                - ec2:DeleteTags
                Condition:
                  ForAllValues:StringEquals:
                    aws:TagKeys:
                    - aws-glue-service-resource
                Resource:
                - arn:aws:ec2:*:*:network-interface/*
                - arn:aws:ec2:*:*:security-group/*
                - arn:aws:ec2:*:*:instance/*
              - Effect: Allow
                Action:
                - s3:*
                Resource:
                - arn:aws:s3:::gdelt-open-data*

  gdeltDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: gdeltcf
        Description: "AWS Glue container to hold metadata tables for the gdelt data"

  gdeltTable:
    Type: "AWS::Glue::Table"
    Properties:
      DatabaseName: gdeltcf
      CatalogId: !Ref AWS::AccountId
      TableInput:
        Name: events
        Owner: hadoop
        Retention: 0
        StorageDescriptor:
          Columns:
          - Name: globaleventid
            Type: int
          - Name: day
            Type: int
          - Name: monthyear
            Type: int
          - Name: year
            Type: int
          - Name: fractiondate
            Type: float
          - Name: actor1code
            Type: string
          - Name: actor1name
            Type: string
          - Name: actor1countrycode
            Type: string
          - Name: actor1knowngroupcode
            Type: string
          - Name: actor1ethniccode
            Type: string
          - Name: actor1religion1code
            Type: string
          - Name: actor1religion2code
            Type: string
          - Name: actor1type1code
            Type: string
          - Name: actor1type2code
            Type: string
          - Name: actor1type3code
            Type: string
          - Name: actor2code
            Type: string
          - Name: actor2name
            Type: string
          - Name: actor2countrycode
            Type: string
          - Name: actor2knowngroupcode
            Type: string
          - Name: actor2ethniccode
            Type: string
          - Name: actor2religion1code
            Type: string
          - Name: actor2religion2code
            Type: string
          - Name: actor2type1code
            Type: string
          - Name: actor2type2code
            Type: string
          - Name: actor2type3code
            Type: string
          - Name: isrootevent
            Type: boolean
          - Name: eventcode
            Type: string
          - Name: eventbasecode
            Type: string
          - Name: eventrootcode
            Type: string
          - Name: quadclass
            Type: int
          - Name: goldsteinscale
            Type: float
          - Name: nummentions
            Type: int
          - Name: numsources
            Type: int
          - Name: numarticles
            Type: int
          - Name: avgtone
            Type: float
          - Name: actor1geo_type
            Type: int
          - Name: actor1geo_fullname
            Type: string
          - Name: actor1geo_countrycode
            Type: string
          - Name: actor1geo_adm1code
            Type: string
          - Name: actor1geo_lat
            Type: float
          - Name: actor1geo_long
            Type: float
          - Name: actor1geo_featureid
            Type: int
          - Name: actor2geo_type
            Type: int
          - Name: actor2geo_fullname
            Type: string
          - Name: actor2geo_countrycode
            Type: string
          - Name: actor2geo_adm1code
            Type: string
          - Name: actor2geo_lat
            Type: float
          - Name: actor2geo_long
            Type: float
          - Name: actor2geo_featureid
            Type: int
          - Name: actiongeo_type
            Type: int
          - Name: actiongeo_fullname
            Type: string
          - Name: actiongeo_countrycode
            Type: string
          - Name: actiongeo_adm1code
            Type: string
          - Name: actiongeo_lat
            Type: float
          - Name: actiongeo_long
            Type: float
          - Name: actiongeo_featureid
            Type: int
          - Name: dateadded
            Type: int
          - Name: sourceurl
            Type: string
          Location: s3://gdelt-open-data/events
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          Compressed: false
          NumberOfBuckets: -1
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
            Parameters:
              field.delim: "\t"
              serialization.format: "\t"
          BucketColumns: []
          SortColumns: []
          Parameters: {}
          SkewedInfo:
            SkewedColumnNames: []
            SkewedColumnValues: []
            SkewedColumnValueLocationMaps: {}
          StoredAsSubDirectories: false
        PartitionKeys: []
        TableType: EXTERNAL_TABLE
        Parameters:
          EXTERNAL: 'TRUE'
          transient_lastDdlTime: '1573814182'

